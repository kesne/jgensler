{"ast":null,"code":"var _jsxFileName = \"/Users/jgensler/dev/jgensler/components/Post/PostComps/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Title from './Title';\nimport Paragraph from './Paragraph';\nconst compList = {\n  TITLE: Title,\n  // SUBTITLE: Subtitle,\n  PARAGRAPH: Paragraph\n};\nexport default function mapJSONToComps(post) {\n  return post.content.map((data, i) => {\n    const Component = compList[data.type];\n    return __jsx(Component, _extends({}, data, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 16\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["/Users/jgensler/dev/jgensler/components/Post/PostComps/index.tsx"],"names":["Title","Paragraph","compList","TITLE","PARAGRAPH","mapJSONToComps","post","content","map","data","i","Component","type"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAMA,MAAMC,QAAkB,GAAG;AACvBC,EAAAA,KAAK,EAAEH,KADgB;AAEvB;AACAI,EAAAA,SAAS,EAAEH;AAHY,CAA3B;AAMA,eAAe,SAASI,cAAT,CAAwBC,IAAxB,EAAwC;AACnD,SAAOA,IAAI,CAACC,OAAL,CAAaC,GAAb,CAAiB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACjC,UAAMC,SAAS,GAAGT,QAAQ,CAACO,IAAI,CAACG,IAAN,CAA1B;AACA,WAAO,MAAC,SAAD,eAAeH,IAAf;AAAqB,MAAA,GAAG,EAAEC,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACH,GAHM,CAAP;AAIH","sourcesContent":["import Title from './Title';\nimport Paragraph from './Paragraph';\nimport { PostData } from '../../../lib/types';\n\ninterface CompList {\n    [key: string]: (props: any) => JSX.Element;\n}\nconst compList: CompList = {\n    TITLE: Title,\n    // SUBTITLE: Subtitle,\n    PARAGRAPH: Paragraph,\n};\n\nexport default function mapJSONToComps(post: PostData) {\n    return post.content.map((data, i) => {\n        const Component = compList[data.type];\n        return <Component {...data} key={i} />;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}