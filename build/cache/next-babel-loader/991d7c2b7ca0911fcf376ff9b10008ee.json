{"ast":null,"code":"import path from 'path';\nimport { promises as fs } from 'fs';\nimport frontMatter from 'front-matter';\nimport p001 from './001';\nimport p002 from './002';\nexport default [p001, p002];\nconst postsDirectory = path.resolve(process.cwd(), 'posts');\nexport async function getPosts() {\n  const files = await fs.readdir(postsDirectory);\n  const mdxFiles = files.filter(filename => filename.endsWith('.mdx')).map(async mdxFile => {\n    const fullFilePath = path.join(postsDirectory, mdxFile);\n    const fileContents = await fs.readFile(fullFilePath, 'utf8');\n    console.log(require(fullFilePath));\n    return frontMatter(fileContents);\n  });\n  const posts = Promise.all(mdxFiles);\n  return posts;\n}","map":{"version":3,"sources":["/Users/jgensler/dev/jgensler/posts/index.ts"],"names":["path","promises","fs","frontMatter","p001","p002","postsDirectory","resolve","process","cwd","getPosts","files","readdir","mdxFiles","filter","filename","endsWith","map","mdxFile","fullFilePath","join","fileContents","readFile","console","log","require","posts","Promise","all"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,SAASC,QAAQ,IAAIC,EAArB,QAA+B,IAA/B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AACA,OAAOC,IAAP,MAAiB,OAAjB;AAEA,eAAe,CAACD,IAAD,EAAOC,IAAP,CAAf;AAEA,MAAMC,cAAc,GAAGN,IAAI,CAACO,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4B,OAA5B,CAAvB;AAEA,OAAO,eAAeC,QAAf,GAA0B;AAC7B,QAAMC,KAAK,GAAG,MAAMT,EAAE,CAACU,OAAH,CAAWN,cAAX,CAApB;AACA,QAAMO,QAAQ,GAAGF,KAAK,CACjBG,MADY,CACLC,QAAQ,IAAIA,QAAQ,CAACC,QAAT,CAAkB,MAAlB,CADP,EAEZC,GAFY,CAER,MAAMC,OAAN,IAAiB;AAClB,UAAMC,YAAY,GAAGnB,IAAI,CAACoB,IAAL,CAAUd,cAAV,EAA0BY,OAA1B,CAArB;AACA,UAAMG,YAAY,GAAG,MAAMnB,EAAE,CAACoB,QAAH,CAAYH,YAAZ,EAA0B,MAA1B,CAA3B;AAEAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACN,YAAD,CAAnB;AACA,WAAOhB,WAAW,CAAmBkB,YAAnB,CAAlB;AACH,GARY,CAAjB;AAUA,QAAMK,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYf,QAAZ,CAAd;AAEA,SAAOa,KAAP;AACH","sourcesContent":["import path from 'path';\nimport { promises as fs } from 'fs';\nimport frontMatter from 'front-matter';\nimport p001 from './001';\nimport p002 from './002';\n\nexport default [p001, p002];\n\nconst postsDirectory = path.resolve(process.cwd(), 'posts');\n\nexport async function getPosts() {\n    const files = await fs.readdir(postsDirectory);\n    const mdxFiles = files\n        .filter(filename => filename.endsWith('.mdx'))\n        .map(async mdxFile => {\n            const fullFilePath = path.join(postsDirectory, mdxFile);\n            const fileContents = await fs.readFile(fullFilePath, 'utf8');\n\n            console.log(require(fullFilePath));\n            return frontMatter<{ slug: string }>(fileContents);\n        });\n\n    const posts = Promise.all(mdxFiles);\n\n    return posts;\n}\n"]},"metadata":{},"sourceType":"module"}